'''
Created on Nov 10, 2017

@author: aleksandar.novic
'''

# sampStr = iter("sample")
# 
# print("char: ", next(sampStr))
# print('char: ', next(sampStr))
'''
class Alphabet:
    def __init__(self):
        self.letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        self.index = -1
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.index >= len(self.letters)-1:
            raise StopIteration
        
        self.index +=1
        return self.letters[self.index]

alpha = Alphabet()

for letter in alpha:
    print(letter)
'''

# person = {'fname' : 'Derek','lname' : 'Banas'}
# 
# for key in person:
#     print(key, person[key])

'''
class Fibonacci:
    def __init__(self):
        self.first = 0
        self.second = 1
    
    def __iter__(self):
        return self
    
    def __next__(self):
        fibSum = self.first + self.second
        self.first, self.second = self.second, fibSum
        return fibSum
    
fibby = Fibonacci()
    
for i in range(11):
    print("Fib {}: {}".format(i+1, next(fibby)))
'''    
    
'''
LIST COMPREHENSIONS   
'''
# map
print(list(map((lambda x: x*2), range(1,11))))    
# list comprehension
print([2* x for x in range(1,11)])


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    